version: "3.8"

services:
  # PostgreSQL OLTP Database
  postgres-oltp:
    image: postgres:15-alpine
    container_name: ecommerce-oltp
    environment:
      POSTGRES_DB: ecommerce_oltp
      POSTGRES_USER: ${OLTP_DB_USER}
      POSTGRES_PASSWORD: ${OLTP_DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_oltp_data:/var/lib/postgresql/data
      - ./docker/postgres/init-oltp.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecommerce_network

  # PostgreSQL OLAP Database
  postgres-olap:
    image: postgres:15-alpine
    container_name: ecommerce-olap
    environment:
      POSTGRES_DB: ecommerce_olap
      POSTGRES_USER: ${OLAP_DB_USER}
      POSTGRES_PASSWORD: ${OLAP_DB_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - postgres_olap_data:/var/lib/postgresql/data
      - ./docker/postgres/init-olap.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecommerce_network

  # MongoDB
  mongodb:
    image: mongo:6-jammy
    container_name: ecommerce-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongo/init.js:/docker-entrypoint-initdb.d/init.js
    command: ["--replSet", "rs0", "--bind_ip_all"]
    networks:
      - ecommerce_network

  # Redis
  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce_network

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: ecommerce-elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - ecommerce_network

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.1
    container_name: ecommerce-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - ecommerce_network

  # Kafka & Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    container_name: ecommerce-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - ecommerce_network

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    container_name: ecommerce-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - ecommerce_network

  # Spark Master
  spark-master:
    image: bitnami/spark:3.5
    container_name: ecommerce-spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8080:8080"
      - "7077:7077"
    networks:
      - ecommerce_network

  # Spark Worker
  spark-worker:
    image: bitnami/spark:3.5
    container_name: ecommerce-spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    depends_on:
      - spark-master
    networks:
      - ecommerce_network

  # Jupyter Lab
  jupyter:
    build:
      context: .
      dockerfile: docker/jupyter/Dockerfile
    container_name: ecommerce-jupyter
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/data
    environment:
      - JUPYTER_ENABLE_LAB=yes
    networks:
      - ecommerce_network

  # Streamlit Dashboard
  dashboard:
    build:
      context: .
      dockerfile: docker/dashboard/Dockerfile
    container_name: ecommerce-dashboard
    ports:
      - "8501:8501"
    volumes:
      - ./src:/app/src
      - ./data:/app/data
    environment:
      - PYTHONPATH=/app
    networks:
      - ecommerce_network

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector:0.90.1
    container_name: ecommerce-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./docker/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP http receiver
      - "8889:8889" # Prometheus exporter
    networks:
      - ecommerce_network

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: ecommerce-prometheus
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    ports:
      - "9090:9090"
    networks:
      - ecommerce_network

  # Grafana
  grafana:
    image: grafana/grafana:10.2.0
    container_name: ecommerce-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - ecommerce_network

volumes:
  postgres_oltp_data:
  postgres_olap_data:
  mongodb_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  ecommerce_network:
    driver: bridge
